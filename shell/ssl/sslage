#!/bin/sh

# =========================================================================
#
# Validate the domain certificate
#
# Displays the time period when the certificate is valid
# Estimates the total number of days when the certificate is valid
# Estimates the number of days left until the certificate expires
#
# Copyright (C) 2023 Ildar Shaimordanov
#
# =========================================================================

VERBOSE=""

while getopts ":v" opt
do
	case "$opt" in
	v ) VERBOSE=1 ;;
	* ) echo "Illegal option: $OPTARG" >&2 ; exit 1 ;;
	esac
done

shift $(( OPTIND-1 ))

[ $# -gt 0 ] || {
	echo "\
Usage: $( basename "$0" ) [-v] HOST[:PORT]
Display age of the SSL certificate.
If no port specified, :443 is assumed.
"
	exit 1
}

# =========================================================================

# uncomment it for testing with the standard curl
#PATH="C:/Windows/System32;$PATH"

AGE=""

for n in openssl curl
do
	command -v $n >/dev/null && {
		AGE="$n"
		break
	}
done

[ -n "$AGE" ] || {
	echo "No proper tool" >&2
	exit 127
}

# =========================================================================

age() {
	age_$AGE "$@"
}

age_openssl() {
	[ -n "$VERBOSE" ] || exec 2>/dev/null

	openssl s_client -connect "$1" </dev/null \
	| openssl x509 -dates -noout
}

age_curl() {
	info="$( age_curl_info "$1" )"
	cert="$( echo "$info" | age_curl_cert )"

	[ -n "$cert" ] || {
		echo "$info" >&2
		return 1
	}

	[ -n "$VERBOSE" ] && echo "$cert" >&2

	echo "$cert" \
	| sed -n \
	's/.*start date: /notBefore=/p; s/.*expire date: /notAfter=/p'
}

age_curl_info() {
	curl -s -v -I "https://$1" 2>&1 \
	| grep '^\*'
}

age_curl_cert() {
	sed -n \
	'/^\* Server certificate:$/ { p; :a; n; /^\* [ \t]/ s/^//p; ta }'
}

# =========================================================================

validate_age() {
	awk -v s0="$( date -u +%s )" -F= '
/notBefore/ { t1 = $2 }
/notAfter/  { t2 = $2 }

# Workaround to enable the script working properly in busybox also,
# because of the limited set of the supported TIME formats there.
function bb_compat(v) { sub(/ \S+$/, "", v); return v }

function epoch(v) { "date -d\"" v "\" -u +%s" | getline v; return v }

function days(v1, v2) { return (v2 - v1) / 86400 }

END {
	if ( ! t1 || ! t2 ) {
		print "Error: No data to validate" > "/dev/stderr"
		exit 1
	}

	print "Since:", t1
	print "Until:", t2

	s1 = epoch(bb_compat(t1))
	s2 = epoch(bb_compat(t2))

	printf "Days: %.0f\n", days(s1, s2)

	n = days(s0, s2)
	if ( n > 0 ) {
		printf "Left: %.0f\n", n
	} else {
		printf "Expired: %.0f\n", -n
	}
}'
}

# =========================================================================

[ "$1" = "${1%:*}" ] && set -- "$1:443"

age "$1" | validate_age

# =========================================================================

# EOF
