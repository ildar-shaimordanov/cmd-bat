#!/bin/sh

# =========================================================================
#
# Validate the domain certificate
#
# Copyright (C) 2023 Ildar Shaimordanov
# MIT License
#
# =========================================================================

# +++
#
# # NAME
#
# `sslage` - validate the domain certificate
#
# # SYNOPSIS
#
#     sslage [-v] HOST[:PORT]
#
# # DESCRIPTION
#
# * Displays the time period when the certificate is valid
# * Estimates the total number of days when the certificate is valid
# * Estimates the number of days left until the certificate expires
#
# ---

VERBOSE=""

while getopts ":v" opt
do
	case "$opt" in
	v ) VERBOSE=1 ;;
	* ) echo "Illegal option: $OPTARG" >&2 ; exit 1 ;;
	esac
done

shift $(( OPTIND-1 ))

[ $# -gt 0 ] || {
	echo "\
Usage: $( basename "$0" ) [-v] HOST[:PORT]
Display age of the host SSL certificate.
If no port specified, :443 is assumed.
Use the -v option to see the certificate details.
"
	exit 1
}

# =========================================================================

# uncomment it for testing with the curl embedded to Windows
#PATH="C:/Windows/System32;$PATH"

AGE=""

for n in openssl curl
do
	command -v $n >/dev/null && {
		AGE="$n"
		break
	}
done

[ -n "$AGE" ] || {
	echo "No proper tool" >&2
	exit 127
}

# =========================================================================

# +++
#
# ## Capturing the certificate dates
#
# `openssl` is the standard tool for testing certificates. That's the
# simplest way to find out the certificate time period.
#
# There is the alternative way to recognize the SSL certificate
# details. Calling `curl` verbosely allows us to capture the full
# information about handshake and extract some details about the
# certificate. If something goes wrong we show it immediately. Also
# using the "-v" option we will be able to show the certificate details.
#
# ---

age() {
	[ "$1" = "${1%:*}" ] && set -- "$1:443"
	age_$AGE "$1"
}

age_openssl() {
	[ -n "$VERBOSE" ] || exec 2>/dev/null

	openssl s_client -servername "${1%:*}" -connect "$1" </dev/null \
	| openssl x509 -dates -noout
}

age_curl() {
	full_info="$( age_curl_full_info "$1" )"
	cert_info="$( echo "$full_info" | age_curl_cert_info )"

	[ -n "$cert_info" ] || {
		echo "$full_info" >&2
		return 1
	}

	[ -n "$VERBOSE" ] && echo "$cert_info" >&2

	echo "$cert_info" \
	| sed -n \
	's/.*start date: /notBefore=/p; s/.*expire date: /notAfter=/p'
}

age_curl_full_info() {
	curl -s -v -I "https://$1" 2>&1 \
	| grep '^\*'
}

age_curl_cert_info() {
	sed -n \
	'/^\* Server certificate:$/ { p; :a; n; /^\* [ \t]/ s/^//p; ta }'
}

# =========================================================================

# +++
#
# ## Calculate the certificate age using `awk` or pure shell
#
# The certificate age is estimated as the number of the whole days. So,
# if today is the last day of the certificate validity, it's assumed
# that the certificate is expired already. I tried to implement the
# script POSIX-compliant as much as possible.
#
# Initially it's been the shell script with `awk` inline script having
# almost 50% of the script size. Later I improved it and added the
# function validating the certificate age implemented in pure shell. I
# decided to leave the previous `awk`-based implementation. Just for fan.
#
# ---

validate_age() {
	validate_age_sh
}

validate_age_sh() {
	s1=""
	s2=""

	while IFS='=' read -r m t
	do
		[ "$m" = "notBefore" ] || [ "$m" = "notAfter" ] || continue

		s="$( date -d "${t% *}" -u +%s )"

		case "$m" in
		notBefore ) t1="$t" ; s1="$s" ;;
		notAfter  ) t2="$t" ; s2="$s" ;;
		esac
	done

	if [ -z "$s1" ] || [ -z "$s2" ]
	then
		echo "Error: No data to validate" >&2
		return 1
	fi

	s0="$( date -u +%s )"
	n="$( days "$s0" "$s2" )"

	if [ "$n" -gt "0" ]
	then
		m="Left"
	else
		m="Expired"
		n="$(( -n ))"
	fi

	echo "Since: $t1"
	echo "Until: $t2"
	echo "Days: $( days "$s1" "$s2" )"
	echo "$m: $n"
}

days() {
	echo "$(( ($2 - $1) / 86400 ))"
}

validate_age_awk() {
	awk -v s0="$( date -u +%s )" -F= '
/notBefore/ { t1 = $2 }
/notAfter/  { t2 = $2 }

# Workaround to enable the script working properly in busybox also,
# because of the limited set of the supported TIME formats there.
function bb_compat(v) { sub(/ \S+$/, "", v); return v }

function epoch(v) { "date -d\"" v "\" -u +%s" | getline v; return v }

function days(v1, v2) { return int((v2 - v1) / 86400) }

END {
	if ( ! t1 || ! t2 ) {
		print "Error: No data to validate" > "/dev/stderr"
		exit 1
	}

	print "Since:", t1
	print "Until:", t2

	s1 = epoch(bb_compat(t1))
	s2 = epoch(bb_compat(t2))

	print "Days:", days(s1, s2)

	n = days(s0, s2)
	if ( n > 0 ) {
		print "Left:", n
	} else {
		print "Expired:", -n
	}
}'
}

# =========================================================================

age "$1" | validate_age

# =========================================================================

# +++
#
# # SEE ALSO
#
# * https://github.com/shakibamoshiri/curly
# Their "check SSL date" does almost the same thing the current project
# implements.
#
# # LICENSE
#
# Copyright 2023 Ildar Shaimordanov
#
#     MIT License
#
# ---

# =========================================================================

# EOF
