#!/bin/sh

# =========================================================================
#
# Copy data from and/or to the clipboard
#
# Copyright (C) 2020-2024 Ildar Shaimordanov
# MIT License
#
# =========================================================================

CLIP_GET=''
CLIP_PUT=''
CLIP_DEV=''
CLIP_IMP=''

CLIP_EOL=''
DOS2UNIX=''
UNIX2DOS=''

CLIP_ENC=''
ENCODING=''

DIRECTION=''

VERBOSELY=''

# =========================================================================

print_usage() {
	warn "\
Copy data from and/or to the clipboard

Usage:
	clp [OPTIONS]
	clp [OPTIONS] | ...
	... | clp [OPTIONS]

Formatting options
	-u	dos2unix
	-d	unix2dos

Encoding options
	-f encoding
	-t encoding
		Encodings for input and output, respectively
	-c	Discard silently unconvertible characters

Stream controlling options
	-I	Force to copy STDIN to clipboard
	-O	Force to paste from clipboard to STDOUT

Information options
	-h	Display this help message
	-v	Display the executable command
	-V	Display versions of tools
"
}

# shellcheck disable=SC3028
print_version() {
	os="$(
		exec 2>/dev/null
		uname -s || cmd /c ver
	)"

	warn "\
${os:-${OSTYPE:-${OS:-unknown}}}
imp=${CLIP_DEV:-${CLIP_IMP:-$CLIP_GET,$CLIP_PUT}}
eol=$DOS2UNIX,$UNIX2DOS
enc=$ENCODING"
}

# =========================================================================

die() {
	warn "$*"
	exit 1
}

warn() {
	echo "$*">&2
}

# =========================================================================

# shellcheck disable=SC2016
getclip() {
	posh \
	'Get-Clipboard -Raw | Write-Host -NoNewLine'
}

# shellcheck disable=SC2016
putclip() {
	posh \
	'$b = @(); $i = [Console]::OpenStandardInput();' \
	'do { $b += @{ c = 0; d = [byte[]]::new(1048576) } }' \
	'while ( $b[-1].c = $i.Read($b[-1].d, 0, $b[-1].d.count) )' \
	'$a = $b | ForEach-Object { $_.d[0..($_.c - 1)] };' \
	'[System.Text.Encoding]::UTF8.GetString($a) | Set-Clipboard'
}

posh() {
	$CLIP_IMP -NoLogo -NoProfile -ExecutionPolicy Bypass -Command "$*"
}

# =========================================================================

lookup_command() {
	for n in "$@"
	do
		command -v "$n" && break
	done
}

# =========================================================================

# shellcheck disable=SC3028
case "$OSTYPE" in
darwin*	) CLIP_OS=darwin ;;
*	) CLIP_OS='' ;;
esac

if CLIP_IMP="$( command -v xsel )"
then
	# Unixes: first attempt - preferable way
	CLIP_GET="$CLIP_IMP --${CLP_SELECTION:-clipboard} --output"
	CLIP_PUT="$CLIP_IMP --${CLP_SELECTION:-clipboard} --input"
elif CLIP_IMP="$( command -v xclip )"
then
	# Unixes: second attempt - another way
	CLIP_GET="$CLIP_IMP -selection ${CLP_SELECTION:-clipboard} -out"
	CLIP_PUT="$CLIP_IMP -selection ${CLP_SELECTION:-clipboard} -in"
elif [ "$CLIP_OS" = "darwin" ]
then
	# OSX? It has its own way
	CLIP_GET="$( command -v pbpaste )"
	CLIP_PUT="$( command -v pbcopy  )"
elif [ -c /dev/clipboard ]
then
	# Cygwin-like? They have special device
	CLIP_DEV='/dev/clipboard'
	CLIP_GET="cat - < $CLIP_DEV"
	CLIP_PUT="cat - > $CLIP_DEV"
elif CLIP_IMP="$( lookup_command powershell pwsh )"
then
	# BusyBox, UnxUtils or something else?
	CLIP_GET='getclip'
	CLIP_PUT='putclip'
fi

# =========================================================================

DOS2UNIX="$( command -v dos2unix )"
DOS2UNIX_OPTS=''

UNIX2DOS="$( command -v unix2dos )"
UNIX2DOS_OPTS=''

if [ -z "$DOS2UNIX" ] || [ -z "$UNIX2DOS" ]
then
	cmd="$( lookup_command sed gsed awk gawk nawk mawk )"
fi

if [ -z "$DOS2UNIX" ]
then
	case "$cmd" in
	*sed ) DOS2UNIX="$cmd" ; DOS2UNIX_OPTS='"s/\r$//"' ;;
	*awk ) DOS2UNIX="$cmd" ; DOS2UNIX_OPTS='-v RS="\r?\n" -v ORS="\n" 1' ;;
	esac
fi

if [ -z "$UNIX2DOS" ]
then
	case "$cmd" in
	*sed ) UNIX2DOS="$cmd" ; UNIX2DOS_OPTS='"s/[^\r]$/&\r/"' ;;
	*awk ) UNIX2DOS="$cmd" ; UNIX2DOS_OPTS='-v RS="\r?\n" -v ORS="\r\n" 1' ;;
	esac
fi

# =========================================================================

ENCODING="$( lookup_command iconv uconv )"

# =========================================================================

warn_not_supported() {
	warn "$1 not supported"
}

while getopts ":hVvudf:t:cIO" arg
do
	case "$arg" in
	h )	print_usage ; exit ;;
	V )	print_version ; exit ;;
	v )	VERBOSELY=1 ;;

	u )
		CLIP_EOL="$DOS2UNIX"
		CLIP_EOL_OPTS="$DOS2UNIX_OPTS"
		[ -n "$CLIP_EOL" ] || warn_not_supported dos2unix
		;;
	d )
		CLIP_EOL="$UNIX2DOS"
		CLIP_EOL_OPTS="$UNIX2DOS_OPTS"
		[ -n "$CLIP_EOL" ] || warn_not_supported unix2dos
		;;

	f | t | c )
		CLIP_ENC="$ENCODING"
		CLIP_ENC_OPTS="$CLIP_ENC_OPTS -$arg $OPTARG"
		[ -n "$CLIP_ENC" ] || warn_not_supported iconv
		;;

	I | O )
		[ -z "$DIRECTION" ] || die "Either -I or -O allowed, not both"
		DIRECTION="$arg"
		;;

	: ) die "Argument expected for -$OPTARG" ;;
	* ) die "Illegal option: -$OPTARG" ;;
	esac
done

# If the direction wasn't specified intentionally, set it to the default
# value from the script use case.

if [ -z "$DIRECTION" ]
then
	if [ -t 0 ]
	then
		DIRECTION='O'
	elif [ -t 1 ]
	then
		DIRECTION='I'
	fi
fi

if [ "$DIRECTION" = "O" ]
then
	# clp
	# clp | ...
	[ -n "$CLIP_GET" ] || die "No tool to paste from clipboard"
	CLIP_RUN="$CLIP_GET"
	CLIP_RUN="$CLIP_RUN${CLIP_EOL:+ | $CLIP_EOL $CLIP_EOL_OPTS}"
	CLIP_RUN="$CLIP_RUN${CLIP_ENC:+ | $CLIP_ENC $CLIP_ENC_OPTS}"
elif [ "$DIRECTION" = "I" ]
then
	# ... | clp
	[ -n "$CLIP_PUT" ] || die "No tool to copy to clipboard"
	CLIP_RUN="$CLIP_PUT"
	CLIP_RUN="${CLIP_EOL:+$CLIP_EOL $CLIP_EOL_OPTS | }$CLIP_RUN"
	CLIP_RUN="${CLIP_ENC:+$CLIP_ENC $CLIP_ENC_OPTS | }$CLIP_RUN"
fi

# ... | clp | ...
[ -n "$CLIP_RUN" ] || die "Useless use in the middle of the pipe"

[ -n "$VERBOSELY" ] && set -x
eval "$CLIP_RUN"

# =========================================================================

# EOF
