#!/bin/sh

# =========================================================================
#
# Copyright (C) 2024 Ildar Shaimordanov
# MIT License
#
# =========================================================================

ME="${0##*/}"

print_usage() {
	echo "\
Execute a command using qemu agent of the virtual machine.
Enable piping data to STDIN of the virtual machine.
Capture STDOUT and STDERR and output on the host.
Return ExitCode of the command.
Usage:
	$ME DOMAIN COMMAND [COMMAND_OPTIONS]
"
}

# =========================================================================

[ $# -ge 2 ] || {
	print_usage >&2
	exit 1
}

VM_NAME="$1"
VM_CMD_PATH="$2"
VM_CMD_ARGS='[]'

[ $# -gt 2 ] \
&& VM_CMD_ARGS="$(
	shift 2
	printf '%s\n' "$@" \
	| jq --raw-input . \
	| jq --compact-output --slurp .
)"

VM_CMD_PIPE="$( [ -t 0 ] || base64 -w0 )"

# =========================================================================

virt_qemu_agent() {
	[ -n "$VIRT_EXEC_DEBUG" ] \
	&& set -o xtrace

	virsh qemu-agent-command --domain "$VM_NAME" --cmd "$1"
}

# =========================================================================

# prepared input:
# {"execute":"guest-exec","arguments":{"capture-output":true,"input-data":"STR","path":"STR","arg":[ARR]}}
#
# expected result:
# {"return":{"pid":INT}}

VM_CMD_EXEC="$(
	jq --compact-output . <<-!
	{
		"execute": "guest-exec",
		"arguments": {
			"capture-output": true,
			"input-data": "$VM_CMD_PIPE",
			"path": "$VM_CMD_PATH",
			"arg": $VM_CMD_ARGS
		}
	}
	!
)"

VM_CMD_PID="$( virt_qemu_agent "$VM_CMD_EXEC" )" \
|| exit $?

# =========================================================================

# prepared input:
# {"execute": "guest-exec-status","arguments":{"pid":INT}}
#
# expected results:
# {"return":{"exited":false}}
# {"return":{"exited":true,"exitcode":INT,"out-data":STR,"err-data":STR}}
# {"return":{...,"out-truncated":BOOL,"err-truncated":BOOL}}

VM_CMD_STATUS="$(
	jq --compact-output --argjson pid "$VM_CMD_PID" \
	'.arguments.pid = $pid.return.pid' <<-!
	{
		"execute": "guest-exec-status",
		"arguments": {
			"pid": 0
		}
	}
	!
)"

while :
do
	# Expand JSON to shell variables VM_CMD_RETURN_*
	eval "$(
		virt_qemu_agent "$VM_CMD_STATUS" \
		| jq --raw-output '
		.return
		| to_entries
		| map(
			"VM_CMD_RETURN_"
			+ (.key | gsub("\\W+"; "_") | ascii_upcase)
			+ "=\""
			+ (.value | tostring)
			+ "\""
		)
		| .[]'
	)"

	[ ${#VM_CMD_RETURN_ERR_DATA} -gt 0 ] \
	&& base64 -di <<-! >&2
	$VM_CMD_RETURN_ERR_DATA
	!

	[ ${#VM_CMD_RETURN_OUT_DATA} -gt 0 ] \
	&& base64 -di <<-!
	$VM_CMD_RETURN_OUT_DATA
	!

	[ "$VM_CMD_RETURN_EXITED" = "true" ] \
	&& [ ${#VM_CMD_RETURN_ERR_TRUNCATED} -eq 0 ] \
	&& [ ${#VM_CMD_RETURN_OUT_TRUNCATED} -eq 0 ] \
	&& break
done

exit $VM_CMD_RETURN_EXITCODE

# =========================================================================

# +++
#
# # USAGE
#
# !!! 2>&1
#
# # Requirements
#
# * virsh
# * jq - for handling JSON
# * base64
# * POSIX shell (like Almquist shell) or bash
#
# base64 is required to encode STDIN while preparing "input-data". Also
# it's used to decode "out-data" and "err-data", both captured from
# the virtual machine (due to some Linux are shipped with jq 1.5-1 not
# supporting `@base64d`).
#
# To check if execution is available:
#
#     virsh qemu-agent-command DOMAIN '{"execute":"guest-info"}' \
#     | jq '.return.supported_commands[] | select(.name | test("guest-exec"))'
#
# # See Also
#
# * https://manpages.ubuntu.com/manpages/bionic/man7/qemu-ga-ref.7.html
# * https://github.com/3hedgehogs/qemu-agent-commands
#
# ---

# =========================================================================

# EOF
